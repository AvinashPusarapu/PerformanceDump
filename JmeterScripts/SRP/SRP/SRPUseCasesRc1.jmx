<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <stringProp name="TestPlan.comments">srp.alertenterprise.com; 172.16.16.69</stringProp>
        <stringProp name="HTTPSampler.domain">172.16.37.224</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Rampup" elementType="Argument">
            <stringProp name="Argument.name">Rampup</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSV" elementType="Argument">
            <stringProp name="Argument.name">CSV</stringProp>
            <stringProp name="Argument.value">C:\Users\pusarapu.avinash\Desktop\2024\SRP\SRP\CSV</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">C:\Users\hitendra.kumar\Documents\DeutscheBankTesting\TestScript\CSV</stringProp>
          </elementProp>
          <elementProp name="Results" elementType="Argument">
            <stringProp name="Argument.name">Results</stringProp>
            <stringProp name="Argument.value">C:\Users\pusarapu.avinash\Desktop\2024\SRP\SRP\Results</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">C:\Users\hitendra.kumar\Documents\DeutscheBankTesting\Results</stringProp>
          </elementProp>
          <elementProp name="i" elementType="Argument">
            <stringProp name="Argument.name">i</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree-Error">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${Results}\RT${__time(E,)}-${__time(hhmmss,)}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${Results}\Ag${__time(E,)}-${__time(hhmmss,)}.csv</stringProp>
        <boolProp name="saveHeaders">false</boolProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="adminLogin">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__setProperty(access_token, ${access_token})};
${__setProperty(refresh_token, ${refresh_token})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lobbyAdminLogin">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token_la</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__setProperty(access_token_la, ${access_token_la})};
${__setProperty(refresh_token, ${refresh_token})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Device-Info" elementType="Header">
              <stringProp name="Header.name">X-Device-Info</stringProp>
              <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMInvite" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">13</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P4D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436994519044</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="name" enabled="true">
          <stringProp name="CounterConfig.start">857</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="asset" enabled="false">
          <stringProp name="CounterConfig.start">7000000002</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">serialNo</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="false">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token_la)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[1]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">asset</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[2]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">requestIdentityFieldNewId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[3]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/upload" enabled="false">
          <stringProp name="HTTPSampler.path">/api/binaryresource/upload</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${CSV}\Image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">${CSV}\Image.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="title" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">crop.jpeg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">title</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">(binary)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="tHeight" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">175</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tHeight</stringProp>
              </elementProp>
              <elementProp name="tWidth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">250</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tWidth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">photoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save" enabled="true">
          <stringProp name="TestPlan.comments">,&quot;photo&quot;:&quot;${photoId}&quot;</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;visitorRule&quot;:true},&quot;extId&quot;:&quot;&quot;,&quot;type&quot;:&quot;Visitor&quot;,&quot;firstName&quot;:&quot;PerfIn${id}&quot;,&quot;lastName&quot;:&quot;UserIn${id}&quot;,&quot;email&quot;:&quot;pusarapu.avinash@alertenterprise.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;fullName&quot;:&quot;PerfIn${id} UserIn${id}&quot;,&quot;extCompany&quot;:&quot;One8&quot;,&quot;isReplaceEntityWhenFound&quot;:true,&quot;isInvite&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Invitation&quot;,&quot;intStatus&quot;:6,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;single&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:4520436994519044,&quot;visitHosts&quot;:[{&quot;hostId&quot;:1,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitEscorts&quot;:[{&quot;escortId&quot;:1,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitStatus&quot;:60}],&quot;requestorId&quot;:1,&quot;requestor&quot;:&quot;admin&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;isInvite&quot;:true,&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMRegCases" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">13</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">150</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P4D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436994519044</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="name">
          <stringProp name="CounterConfig.start">360</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="asset" enabled="false">
          <stringProp name="CounterConfig.start">7000000002</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">serialNo</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="false">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token_la)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[1]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">asset</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[2]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">requestIdentityFieldNewId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[3]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/upload" enabled="false">
          <stringProp name="HTTPSampler.path">/api/binaryresource/upload</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${CSV}\Image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">${CSV}\Image.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="title" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">crop.jpeg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">title</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">(binary)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="tHeight" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">175</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tHeight</stringProp>
              </elementProp>
              <elementProp name="tWidth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">250</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tWidth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">photoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save">
          <stringProp name="TestPlan.comments">,&quot;photo&quot;:&quot;${photoId}&quot;</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;vehicleMake&quot;:&quot;BMW&quot;,&quot;vehicleColor&quot;:&quot;Black&quot;,&quot;vehicleLicensePlate&quot;:&quot;APerf${id}&quot;,&quot;vehicleLicenseState&quot;:&quot;AP&quot;,&quot;visitorRuleCheck&quot;:true},&quot;extId&quot;:&quot;&quot;,&quot;type&quot;:&quot;Visitor&quot;,&quot;photo&quot;:&quot;5001732627649844&quot;,&quot;firstName&quot;:&quot;APerf${id}&quot;,&quot;lastName&quot;:&quot;AUser${id}&quot;,&quot;email&quot;:&quot;pusarapu.avinash@alertenterprise.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;fullName&quot;:&quot;APerf${id} AUser${id}&quot;,&quot;extCompany&quot;:&quot;One8&quot;,&quot;isReplaceEntityWhenFound&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/save">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Walkin&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;single&quot;,&quot;visitEndDate&quot;:&quot;2024-09-06T18:30:00-0000&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:1,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitStatus&quot;:60}],&quot;requestorId&quot;:1,&quot;requestor&quot;:&quot;admin&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;,&quot;customProperties&quot;:{&quot;meeting_room&quot;:&quot;123&quot;,&quot;safetyVideoAcknowledgement&quot;:true,&quot;dateofLastSafetyVideo&quot;:&quot;2024-09-03T00:00:00-0000&quot;,&quot;safetyVideo&quot;:true}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}AssetCreate" enabled="false">
          <stringProp name="HTTPSampler.path">/api/asset/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${asset}&quot;,&quot;type&quot;:&quot;temporary_badge&quot;,&quot;subType&quot;:&quot;TEM-001&quot;,&quot;serialNo&quot;:&quot;${serialNo}&quot;,&quot;assetAccessId&quot;:&quot;${serialNo}&quot;,&quot;text&quot;:&quot;PerformanceBadge&quot;,&quot;assetStatus&quot;:&quot;OPEN&quot;,&quot;sourceId&quot;:&quot;${serialNo}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckIn-/api/tpm/visitorsvisits/save" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operation&quot;:69,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/badgedesigner/find" enabled="false">
          <stringProp name="HTTPSampler.path">/api/badgedesigner/find</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterCriteria&quot;:[{&quot;fieldName&quot;:&quot;extId&quot;,&quot;operator&quot;:&quot;in&quot;,&quot;valueList&quot;:[&quot;VIMBadgeTemplate&quot;]}],&quot;page&quot;:1,&quot;start&quot;:0,&quot;size&quot;:100}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/badgedesigner/getbadgetemplate" enabled="false">
          <stringProp name="HTTPSampler.path">/api/badgedesigner/getbadgetemplate</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;fieldNewIdentityId&quot;:null,&quot;visitsUIId&quot;:&quot;${visitorVisitsId}&quot;,&quot;userId&quot;:&quot;3434822543468202&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;badgeTempId&quot;:&quot;4637822293618827&quot;,&quot;fieldNewObj&quot;:null,&quot;isNoUserRequest&quot;:false,&quot;assetId&quot;:0,&quot;accessRequestId&quot;:null,&quot;identityAssetId&quot;:0,&quot;bothSides&quot;:false,&quot;frontSide&quot;:true,&quot;isPrintAgentCall&quot;:false,&quot;photoConfig&quot;:&quot;dummyNoPhotoAvailable&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/getBase64" enabled="false">
          <stringProp name="HTTPSampler.path">/api/binaryresource/getBase64</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;binaryIdsData&quot;:[&quot;${photoId}&quot;,&quot;4782446947307167&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/badgedesigner/getbadgetemplate" enabled="false">
          <stringProp name="HTTPSampler.path">/api/badgedesigner/getbadgetemplate</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;fieldNewIdentityId&quot;:null,&quot;visitsUIId&quot;:&quot;${visitorVisitsId}&quot;,&quot;userId&quot;:&quot;3434822543468202&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;badgeTempId&quot;:&quot;4637822293618827&quot;,&quot;fieldNewObj&quot;:null,&quot;isNoUserRequest&quot;:false,&quot;assetId&quot;:0,&quot;accessRequestId&quot;:null,&quot;identityAssetId&quot;:0,&quot;bothSides&quot;:false,&quot;frontSide&quot;:false,&quot;isPrintAgentCall&quot;:false,&quot;photoConfig&quot;:&quot;dummyNoPhotoAvailable&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/getBase64" enabled="false">
          <stringProp name="HTTPSampler.path">/api/binaryresource/getBase64</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;binaryIdsData&quot;:[&quot;${photoId}&quot;]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckOut-/api/tpm/visitorsvisits/save" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operation&quot;:80,&quot;extId&quot;:&quot;${extId2}&quot;,&quot;id&quot;:&quot;${visitorVisitsId1}&quot;,&quot;visitId&quot;:&quot;${visitId1}&quot;,&quot;visitorId&quot;:&quot;${visitorId1}&quot;,&quot;finalCheckedOut&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${CSV}/checkout.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">extId2,visitorVisitsId1,visitorId1,visitId1</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${__threadNum}&quot;&lt;=&quot;300&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckOut-/api/tpm/visitorsvisits/save" enabled="true">
            <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operation&quot;:80,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;finalCheckedOut&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMGroupOperations" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">15</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
          <stringProp name="CounterConfig.start">40</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">gId</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/getnewids">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupVisitCreation10" enabled="false">
          <stringProp name="TestPlan.comments">10 users in a group</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Interview&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;group&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor1}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor2}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor3}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor4}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor5}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor10}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor6}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor7}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor8}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor9}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;}],&quot;groupName&quot;:&quot;Perf${gId}&quot;,&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitexId;vvExId0;vvExtId0;vvVisitorId0;vvExId1;vvExtId1;vvVisitorId1;vvExId2;vvExtId2;vvVisitorId2;vvExId3;vvExtId3;vvVisitorId3;vvExId4;vvExtId4;vvVisitorId4;vvExId5;vvExtId5;vvVisitorId5;vvExId6;vvExtId6;vvVisitorId6;vvExId7;vvExtId7;vvVisitorId7;vvExId8;vvExtId8;vvVisitorId8;vvExId9;vvExtId9;vvVisitorId9;</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id;$.data[0].visitorsVisits[0].id;$.data[0].visitorsVisits[0].extId;$.data[0].visitorsVisits[0].visitorId;$.data[0].visitorsVisits[1].id;$.data[0].visitorsVisits[1].extId;$.data[0].visitorsVisits[1].visitorId;$.data[0].visitorsVisits[2].id;$.data[0].visitorsVisits[2].extId;$.data[0].visitorsVisits[2].visitorId;$.data[0].visitorsVisits[3].id;$.data[0].visitorsVisits[3].extId;$.data[0].visitorsVisits[3].visitorId;$.data[0].visitorsVisits[4].id;$.data[0].visitorsVisits[4].extId;$.data[0].visitorsVisits[4].visitorId;$.data[0].visitorsVisits[5].id;$.data[0].visitorsVisits[5].extId;$.data[0].visitorsVisits[5].visitorId;$.data[0].visitorsVisits[6].id;$.data[0].visitorsVisits[6].extId;$.data[0].visitorsVisits[6].visitorId;$.data[0].visitorsVisits[7].id;$.data[0].visitorsVisits[7].extId;$.data[0].visitorsVisits[7].visitorId;$.data[0].visitorsVisits[8].id;$.data[0].visitorsVisits[8].extId;$.data[0].visitorsVisits[8].visitorId;$.data[0].visitorsVisits[9].id;$.data[0].visitorsVisits[9].extId;$.data[0].visitorsVisits[9].visitorId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">visitexIdNF;vvExId0NF;vvExtId0NF;vvVisitorId0NF;vvExId1NF;vvExtId1NF;vvVisitorId1NF;vvExId2NF;vvExtId2NF;vvVisitorId2NF;vvExId3NF;vvExtId3NF;vvVisitorId3NF;vvExId4NF;vvExtId4NF;vvVisitorId4NF;vvExId5NF;vvExtId5NF;vvVisitorId5NF;vvExId6NF;vvExtId6NF;vvVisitorId6NF;vvExId7NF;vvExtId7NF;vvVisitorId7NF;vvExId8NF;vvExtId8NF;vvVisitorId8NF;vvExId9NF;vvExtId9NF;vvVisitorId9NF;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">extId;groupName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId;$.data[0].groupName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;random&quot;,&quot;${__Random(1000,9999,)}&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${CSV}/groupVisit.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">visitor1,visitor2,visitor3,visitor4,visitor5,visitor6,visitor7,visitor8,visitor9,visitor10</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupVisitCreation50">
          <stringProp name="TestPlan.comments">50 visitors in a group</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Interview&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;group&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor1}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor2}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor3}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor4}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor5}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor6}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor7}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor8}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor9}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor10}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor11}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor12}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor13}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor14}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor15}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor16}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor17}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor18}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor19}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor20}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor21}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor22}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor23}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor24}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor25}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor26}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor27}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor28}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor29}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor30}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor31}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor32}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor33}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor34}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor35}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor36}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor37}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor38}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor39}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor40}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor41}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor42}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor43}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor44}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor45}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor46}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor47}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor48}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor49}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor50}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;}],&quot;groupName&quot;:&quot;Perf${gId}&quot;,&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitexId;vvExId0;vvExtId0;vvVisitorId0;vvExId1;vvExtId1;vvVisitorId1;vvExId2;vvExtId2;vvVisitorId2;vvExId3;vvExtId3;vvVisitorId3;vvExId4;vvExtId4;vvVisitorId4;vvExId5;vvExtId5;vvVisitorId5;vvExId6;vvExtId6;vvVisitorId6;vvExId7;vvExtId7;vvVisitorId7;vvExId8;vvExtId8;vvVisitorId8;vvExId9;vvExtId9;vvVisitorId9;vvExId10;vvExtId10;vvVisitorId10;vvExId11;vvExtId11;vvVisitorId11;vvExId12;vvExtId12;vvVisitorId12;vvExId13;vvExtId13;vvVisitorId13;vvExId14;vvExtId14;vvVisitorId14;vvExId15;vvExtId15;vvVisitorId15;vvExId16;vvExtId16;vvVisitorId16;vvExId17;vvExtId17;vvVisitorId17;vvExId18;vvExtId18;vvVisitorId18;vvExId19;vvExtId19;vvVisitorId19;vvExId20;vvExtId20;vvVisitorId20;vvExId21;vvExtId21;vvVisitorId21;vvExId22;vvExtId22;vvVisitorId22;vvExId23;vvExtId23;vvVisitorId23;vvExId24;vvExtId24;vvVisitorId24;vvExId25;vvExtId25;vvVisitorId25;vvExId26;vvExtId26;vvVisitorId26;vvExId27;vvExtId27;vvVisitorId27;vvExId28;vvExtId28;vvVisitorId28;vvExId29;vvExtId29;vvVisitorId29;vvExId30;vvExtId30;vvVisitorId30;vvExId31;vvExtId31;vvVisitorId31;vvExId32;vvExtId32;vvVisitorId32;vvExId33;vvExtId33;vvVisitorId33;vvExId34;vvExtId34;vvVisitorId34;vvExId35;vvExtId35;vvVisitorId35;vvExId36;vvExtId36;vvVisitorId36;vvExId37;vvExtId37;vvVisitorId37;vvExId38;vvExtId38;vvVisitorId38;vvExId39;vvExtId39;vvVisitorId39;vvExId40;vvExtId40;vvVisitorId40;vvExId41;vvExtId41;vvVisitorId41;vvExId42;vvExtId42;vvVisitorId42;vvExId43;vvExtId43;vvVisitorId43;vvExId44;vvExtId44;vvVisitorId44;vvExId45;vvExtId45;vvVisitorId45;vvExId46;vvExtId46;vvVisitorId46;vvExId47;vvExtId47;vvVisitorId47;vvExId48;vvExtId48;vvVisitorId48;vvExId49;vvExtId49;vvVisitorId49</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id;$.data[0].visitorsVisits[0].id;$.data[0].visitorsVisits[0].extId;$.data[0].visitorsVisits[0].visitorId;$.data[0].visitorsVisits[1].id;$.data[0].visitorsVisits[1].extId;$.data[0].visitorsVisits[1].visitorId;$.data[0].visitorsVisits[2].id;$.data[0].visitorsVisits[2].extId;$.data[0].visitorsVisits[2].visitorId;$.data[0].visitorsVisits[3].id;$.data[0].visitorsVisits[3].extId;$.data[0].visitorsVisits[3].visitorId;$.data[0].visitorsVisits[4].id;$.data[0].visitorsVisits[4].extId;$.data[0].visitorsVisits[4].visitorId;$.data[0].visitorsVisits[5].id;$.data[0].visitorsVisits[5].extId;$.data[0].visitorsVisits[5].visitorId;$.data[0].visitorsVisits[6].id;$.data[0].visitorsVisits[6].extId;$.data[0].visitorsVisits[6].visitorId;$.data[0].visitorsVisits[7].id;$.data[0].visitorsVisits[7].extId;$.data[0].visitorsVisits[7].visitorId;$.data[0].visitorsVisits[8].id;$.data[0].visitorsVisits[8].extId;$.data[0].visitorsVisits[8].visitorId;$.data[0].visitorsVisits[9].id;$.data[0].visitorsVisits[9].extId;$.data[0].visitorsVisits[9].visitorId;$.data[0].visitorsVisits[10].id;$.data[0].visitorsVisits[10].extId;$.data[0].visitorsVisits[10].visitorId;$.data[0].visitorsVisits[11].id;$.data[0].visitorsVisits[11].extId;$.data[0].visitorsVisits[11].visitorId;$.data[0].visitorsVisits[12].id;$.data[0].visitorsVisits[12].extId;$.data[0].visitorsVisits[12].visitorId;$.data[0].visitorsVisits[13].id;$.data[0].visitorsVisits[13].extId;$.data[0].visitorsVisits[13].visitorId;$.data[0].visitorsVisits[14].id;$.data[0].visitorsVisits[14].extId;$.data[0].visitorsVisits[14].visitorId;$.data[0].visitorsVisits[15].id;$.data[0].visitorsVisits[15].extId;$.data[0].visitorsVisits[15].visitorId;$.data[0].visitorsVisits[16].id;$.data[0].visitorsVisits[16].extId;$.data[0].visitorsVisits[16].visitorId;$.data[0].visitorsVisits[17].id;$.data[0].visitorsVisits[17].extId;$.data[0].visitorsVisits[17].visitorId;$.data[0].visitorsVisits[18].id;$.data[0].visitorsVisits[18].extId;$.data[0].visitorsVisits[18].visitorId;$.data[0].visitorsVisits[19].id;$.data[0].visitorsVisits[19].extId;$.data[0].visitorsVisits[19].visitorId;$.data[0].visitorsVisits[20].id;$.data[0].visitorsVisits[20].extId;$.data[0].visitorsVisits[20].visitorId;$.data[0].visitorsVisits[21].id;$.data[0].visitorsVisits[21].extId;$.data[0].visitorsVisits[21].visitorId;$.data[0].visitorsVisits[22].id;$.data[0].visitorsVisits[22].extId;$.data[0].visitorsVisits[22].visitorId;$.data[0].visitorsVisits[23].id;$.data[0].visitorsVisits[23].extId;$.data[0].visitorsVisits[23].visitorId;$.data[0].visitorsVisits[24].id;$.data[0].visitorsVisits[24].extId;$.data[0].visitorsVisits[24].visitorId;$.data[0].visitorsVisits[25].id;$.data[0].visitorsVisits[25].extId;$.data[0].visitorsVisits[25].visitorId;$.data[0].visitorsVisits[26].id;$.data[0].visitorsVisits[26].extId;$.data[0].visitorsVisits[26].visitorId;$.data[0].visitorsVisits[27].id;$.data[0].visitorsVisits[27].extId;$.data[0].visitorsVisits[27].visitorId;$.data[0].visitorsVisits[28].id;$.data[0].visitorsVisits[28].extId;$.data[0].visitorsVisits[28].visitorId;$.data[0].visitorsVisits[29].id;$.data[0].visitorsVisits[29].extId;$.data[0].visitorsVisits[29].visitorId;$.data[0].visitorsVisits[30].id;$.data[0].visitorsVisits[30].extId;$.data[0].visitorsVisits[30].visitorId;$.data[0].visitorsVisits[31].id;$.data[0].visitorsVisits[31].extId;$.data[0].visitorsVisits[31].visitorId;$.data[0].visitorsVisits[32].id;$.data[0].visitorsVisits[32].extId;$.data[0].visitorsVisits[32].visitorId;$.data[0].visitorsVisits[33].id;$.data[0].visitorsVisits[33].extId;$.data[0].visitorsVisits[33].visitorId;$.data[0].visitorsVisits[34].id;$.data[0].visitorsVisits[34].extId;$.data[0].visitorsVisits[34].visitorId;$.data[0].visitorsVisits[35].id;$.data[0].visitorsVisits[35].extId;$.data[0].visitorsVisits[35].visitorId;$.data[0].visitorsVisits[36].id;$.data[0].visitorsVisits[36].extId;$.data[0].visitorsVisits[36].visitorId;$.data[0].visitorsVisits[37].id;$.data[0].visitorsVisits[37].extId;$.data[0].visitorsVisits[37].visitorId;$.data[0].visitorsVisits[38].id;$.data[0].visitorsVisits[38].extId;$.data[0].visitorsVisits[38].visitorId;$.data[0].visitorsVisits[39].id;$.data[0].visitorsVisits[39].extId;$.data[0].visitorsVisits[39].visitorId;$.data[0].visitorsVisits[40].id;$.data[0].visitorsVisits[40].extId;$.data[0].visitorsVisits[40].visitorId;$.data[0].visitorsVisits[41].id;$.data[0].visitorsVisits[41].extId;$.data[0].visitorsVisits[41].visitorId;$.data[0].visitorsVisits[42].id;$.data[0].visitorsVisits[42].extId;$.data[0].visitorsVisits[42].visitorId;$.data[0].visitorsVisits[43].id;$.data[0].visitorsVisits[43].extId;$.data[0].visitorsVisits[43].visitorId;$.data[0].visitorsVisits[44].id;$.data[0].visitorsVisits[44].extId;$.data[0].visitorsVisits[44].visitorId;$.data[0].visitorsVisits[45].id;$.data[0].visitorsVisits[45].extId;$.data[0].visitorsVisits[45].visitorId;$.data[0].visitorsVisits[46].id;$.data[0].visitorsVisits[46].extId;$.data[0].visitorsVisits[46].visitorId;$.data[0].visitorsVisits[47].id;$.data[0].visitorsVisits[47].extId;$.data[0].visitorsVisits[47].visitorId;$.data[0].visitorsVisits[48].id;$.data[0].visitorsVisits[48].extId;$.data[0].visitorsVisits[48].visitorId;$.data[0].visitorsVisits[49].id;$.data[0].visitorsVisits[49].extId;$.data[0].visitorsVisits[49].visitorId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">visitexIdNF;vvExId0NF;vvExtId0NF;vvVisitorId0NF;vvExId1NF;vvExtId1NF;vvVisitorId1NF;vvExId2NF;vvExtId2NF;vvVisitorId2NF;vvExId3NF;vvExtId3NF;vvVisitorId3NF;vvExId4NF;vvExtId4NF;vvVisitorId4NF;vvExId5NF;vvExtId5NF;vvVisitorId5NF;vvExId6NF;vvExtId6NF;vvVisitorId6NF;vvExId7NF;vvExtId7NF;vvVisitorId7NF;vvExId8NF;vvExtId8NF;vvVisitorId8NF;vvExId9NF;vvExtId9NF;vvVisitorId9NF;vvExId10NF;vvExtId10NF;vvVisitorId10NF;vvExId11NF;vvExtId11NF;vvVisitorId11NF;vvExId12NF;vvExtId12NF;vvVisitorId12NF;vvExId13NF;vvExtId13NF;vvVisitorId13NF;vvExId14NF;vvExtId14NF;vvVisitorId14NF;vvExId15NF;vvExtId15NF;vvVisitorId15NF;vvExId16NF;vvExtId16NF;vvVisitorId16NF;vvExId17NF;vvExtId17NF;vvVisitorId17NF;vvExId18NF;vvExtId18NF;vvVisitorId18NF;vvExId19NF;vvExtId19NF;vvVisitorId19NF;vvExId20NF;vvExtId20NF;vvVisitorId20NF;vvExId21NF;vvExtId21NF;vvVisitorId21NF;vvExId22NF;vvExtId22NF;vvVisitorId22NF;vvExId23NF;vvExtId23NF;vvVisitorId23NF;vvExId24NF;vvExtId24NF;vvVisitorId24NF;vvExId25NF;vvExtId25NF;vvVisitorId25NF;vvExId26NF;vvExtId26NF;vvVisitorId26NF;vvExId27NF;vvExtId27NF;vvVisitorId27NF;vvExId28NF;vvExtId28NF;vvVisitorId28NF;vvExId29NF;vvExtId29NF;vvVisitorId29NF;vvExId30NF;vvExtId30NF;vvVisitorId30NF;vvExId31NF;vvExtId31NF;vvVisitorId31NF;vvExId32NF;vvExtId32NF;vvVisitorId32NF;vvExId33NF;vvExtId33NF;vvVisitorId33NF;vvExId34NF;vvExtId34NF;vvVisitorId34NF;vvExId35NF;vvExtId35NF;vvVisitorId35NF;vvExId36NF;vvExtId36NF;vvVisitorId36NF;vvExId37NF;vvExtId37NF;vvVisitorId37NF;vvExId38NF;vvExtId38NF;vvVisitorId38NF;vvExId39NF;vvExtId39NF;vvVisitorId39NF;vvExId40NF;vvExtId40NF;vvVisitorId40NF;vvExId41NF;vvExtId41NF;vvVisitorId41NF;vvExId42NF;vvExtId42NF;vvVisitorId42NF;vvExId43NF;vvExtId43NF;vvVisitorId43NF;vvExId44NF;vvExtId44NF;vvVisitorId44NF;vvExId45NF;vvExtId45NF;vvVisitorId45NF;vvExId46NF;vvExtId46NF;vvVisitorId46NF;vvExId47NF;vvExtId47NF;vvVisitorId47NF;vvExId48NF;vvExtId48NF;vvVisitorId48NF;vvExId49NF;vvExtId49NF;vvVisitorId49NF</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">extId;groupName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId;$.data[0].groupName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;random&quot;,&quot;${__Random(1000,9999,)}&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${CSV}/groupVisit.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">visitor1,visitor2,visitor3,visitor4,visitor5,visitor6,visitor7,visitor8,visitor9,visitor10, visitor11,visitor12,visitor13,visitor14,visitor15,visitor16,visitor17,visitor18,visitor19,visitor20, visitor21,visitor22,visitor23,visitor24,visitor25,visitor26,visitor27,visitor28,visitor29,visitor30, visitor31,visitor32,visitor33,visitor34,visitor35,visitor36,visitor37,visitor38,visitor39,visitor40, visitor41,visitor42,visitor43,visitor44,visitor45,visitor46,visitor47,visitor48,visitor49,visitor50 </stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckIn10" enabled="false">
          <stringProp name="TestPlan.comments">10Users</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId0}&quot;,&quot;id&quot;:&quot;${vvExId0}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId0}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId1}&quot;,&quot;id&quot;:&quot;${vvExId1}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId1}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId2}&quot;,&quot;id&quot;:&quot;${vvExId2}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId2}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId3}&quot;,&quot;id&quot;:&quot;${vvExId3}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId3}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId4}&quot;,&quot;id&quot;:&quot;${vvExId4}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId4}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId5}&quot;,&quot;id&quot;:&quot;${vvExId5}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId5}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId6}&quot;,&quot;id&quot;:&quot;${vvExId6}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId6}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId7}&quot;,&quot;id&quot;:&quot;${vvExId7}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId7}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId8}&quot;,&quot;id&quot;:&quot;${vvExId8}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId8}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId9}&quot;,&quot;id&quot;:&quot;${vvExId9}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId9}&quot;,&quot;finalCheckedOut&quot;:true}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckIn50" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId0}&quot;,&quot;id&quot;:&quot;${vvExId0}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId0}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId1}&quot;,&quot;id&quot;:&quot;${vvExId1}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId1}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId2}&quot;,&quot;id&quot;:&quot;${vvExId2}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId2}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId3}&quot;,&quot;id&quot;:&quot;${vvExId3}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId3}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId4}&quot;,&quot;id&quot;:&quot;${vvExId4}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId4}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId5}&quot;,&quot;id&quot;:&quot;${vvExId5}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId5}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId6}&quot;,&quot;id&quot;:&quot;${vvExId6}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId6}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId7}&quot;,&quot;id&quot;:&quot;${vvExId7}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId7}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId8}&quot;,&quot;id&quot;:&quot;${vvExId8}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId8}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId9}&quot;,&quot;id&quot;:&quot;${vvExId9}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId9}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId10}&quot;,&quot;id&quot;:&quot;${vvExId10}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId10}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId11}&quot;,&quot;id&quot;:&quot;${vvExId11}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId11}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId12}&quot;,&quot;id&quot;:&quot;${vvExId12}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId12}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId13}&quot;,&quot;id&quot;:&quot;${vvExId13}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId13}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId14}&quot;,&quot;id&quot;:&quot;${vvExId14}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId14}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId15}&quot;,&quot;id&quot;:&quot;${vvExId15}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId15}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId16}&quot;,&quot;id&quot;:&quot;${vvExId16}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId16}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId17}&quot;,&quot;id&quot;:&quot;${vvExId17}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId17}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId18}&quot;,&quot;id&quot;:&quot;${vvExId18}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId18}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId19}&quot;,&quot;id&quot;:&quot;${vvExId19}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId19}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId20}&quot;,&quot;id&quot;:&quot;${vvExId20}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId20}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId21}&quot;,&quot;id&quot;:&quot;${vvExId21}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId21}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId22}&quot;,&quot;id&quot;:&quot;${vvExId22}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId22}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId23}&quot;,&quot;id&quot;:&quot;${vvExId23}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId23}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId24}&quot;,&quot;id&quot;:&quot;${vvExId24}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId24}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId25}&quot;,&quot;id&quot;:&quot;${vvExId25}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId25}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId26}&quot;,&quot;id&quot;:&quot;${vvExId26}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId26}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId27}&quot;,&quot;id&quot;:&quot;${vvExId27}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId27}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId28}&quot;,&quot;id&quot;:&quot;${vvExId28}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId28}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId29}&quot;,&quot;id&quot;:&quot;${vvExId29}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId29}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId30}&quot;,&quot;id&quot;:&quot;${vvExId30}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId30}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId31}&quot;,&quot;id&quot;:&quot;${vvExId31}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId31}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId32}&quot;,&quot;id&quot;:&quot;${vvExId32}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId32}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId33}&quot;,&quot;id&quot;:&quot;${vvExId33}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId33}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId34}&quot;,&quot;id&quot;:&quot;${vvExId34}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId34}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId35}&quot;,&quot;id&quot;:&quot;${vvExId35}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId35}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId36}&quot;,&quot;id&quot;:&quot;${vvExId36}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId36}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId37}&quot;,&quot;id&quot;:&quot;${vvExId37}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId37}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId38}&quot;,&quot;id&quot;:&quot;${vvExId38}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId38}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId39}&quot;,&quot;id&quot;:&quot;${vvExId39}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId39}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId40}&quot;,&quot;id&quot;:&quot;${vvExId40}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId40}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId41}&quot;,&quot;id&quot;:&quot;${vvExId41}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId41}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId42}&quot;,&quot;id&quot;:&quot;${vvExId42}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId42}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId43}&quot;,&quot;id&quot;:&quot;${vvExId43}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId43}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId44}&quot;,&quot;id&quot;:&quot;${vvExId44}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId44}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId45}&quot;,&quot;id&quot;:&quot;${vvExId45}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId45}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId46}&quot;,&quot;id&quot;:&quot;${vvExId46}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId46}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId47}&quot;,&quot;id&quot;:&quot;${vvExId47}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId47}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId48}&quot;,&quot;id&quot;:&quot;${vvExId48}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId48}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:69,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId49}&quot;,&quot;id&quot;:&quot;${vvExId49}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId49}&quot;,&quot;finalCheckedOut&quot;:true}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckOut10" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId0}&quot;,&quot;id&quot;:&quot;${vvExId0}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId0}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId1}&quot;,&quot;id&quot;:&quot;${vvExId1}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId1}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId2}&quot;,&quot;id&quot;:&quot;${vvExId2}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId2}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId3}&quot;,&quot;id&quot;:&quot;${vvExId3}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId3}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId4}&quot;,&quot;id&quot;:&quot;${vvExId4}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId4}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId5}&quot;,&quot;id&quot;:&quot;${vvExId5}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId5}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId6}&quot;,&quot;id&quot;:&quot;${vvExId6}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId6}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId7}&quot;,&quot;id&quot;:&quot;${vvExId7}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId7}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId8}&quot;,&quot;id&quot;:&quot;${vvExId8}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId8}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId9}&quot;,&quot;id&quot;:&quot;${vvExId9}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId9}&quot;,&quot;finalCheckedOut&quot;:true}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">20000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckOut50" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId0}&quot;,&quot;id&quot;:&quot;${vvExId0}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId0}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId1}&quot;,&quot;id&quot;:&quot;${vvExId1}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId1}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId2}&quot;,&quot;id&quot;:&quot;${vvExId2}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId2}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId3}&quot;,&quot;id&quot;:&quot;${vvExId3}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId3}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId4}&quot;,&quot;id&quot;:&quot;${vvExId4}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId4}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId5}&quot;,&quot;id&quot;:&quot;${vvExId5}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId5}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId6}&quot;,&quot;id&quot;:&quot;${vvExId6}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId6}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId7}&quot;,&quot;id&quot;:&quot;${vvExId7}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId7}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId8}&quot;,&quot;id&quot;:&quot;${vvExId8}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId8}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId9}&quot;,&quot;id&quot;:&quot;${vvExId9}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId9}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId10}&quot;,&quot;id&quot;:&quot;${vvExId10}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId10}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId11}&quot;,&quot;id&quot;:&quot;${vvExId11}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId11}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId12}&quot;,&quot;id&quot;:&quot;${vvExId12}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId12}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId13}&quot;,&quot;id&quot;:&quot;${vvExId13}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId13}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId14}&quot;,&quot;id&quot;:&quot;${vvExId14}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId14}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId15}&quot;,&quot;id&quot;:&quot;${vvExId15}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId15}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId16}&quot;,&quot;id&quot;:&quot;${vvExId16}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId16}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId17}&quot;,&quot;id&quot;:&quot;${vvExId17}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId17}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId18}&quot;,&quot;id&quot;:&quot;${vvExId18}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId18}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId19}&quot;,&quot;id&quot;:&quot;${vvExId19}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId19}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId20}&quot;,&quot;id&quot;:&quot;${vvExId20}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId20}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId21}&quot;,&quot;id&quot;:&quot;${vvExId21}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId21}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId22}&quot;,&quot;id&quot;:&quot;${vvExId22}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId22}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId23}&quot;,&quot;id&quot;:&quot;${vvExId23}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId23}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId24}&quot;,&quot;id&quot;:&quot;${vvExId24}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId24}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId25}&quot;,&quot;id&quot;:&quot;${vvExId25}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId25}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId26}&quot;,&quot;id&quot;:&quot;${vvExId26}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId26}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId27}&quot;,&quot;id&quot;:&quot;${vvExId27}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId27}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId28}&quot;,&quot;id&quot;:&quot;${vvExId28}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId28}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId29}&quot;,&quot;id&quot;:&quot;${vvExId29}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId29}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId30}&quot;,&quot;id&quot;:&quot;${vvExId30}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId30}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId31}&quot;,&quot;id&quot;:&quot;${vvExId31}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId31}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId32}&quot;,&quot;id&quot;:&quot;${vvExId32}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId32}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId33}&quot;,&quot;id&quot;:&quot;${vvExId33}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId33}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId34}&quot;,&quot;id&quot;:&quot;${vvExId34}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId34}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId35}&quot;,&quot;id&quot;:&quot;${vvExId35}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId35}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId36}&quot;,&quot;id&quot;:&quot;${vvExId36}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId36}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId37}&quot;,&quot;id&quot;:&quot;${vvExId37}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId37}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId38}&quot;,&quot;id&quot;:&quot;${vvExId38}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId38}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId39}&quot;,&quot;id&quot;:&quot;${vvExId39}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId39}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId40}&quot;,&quot;id&quot;:&quot;${vvExId40}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId40}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId41}&quot;,&quot;id&quot;:&quot;${vvExId41}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId41}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId42}&quot;,&quot;id&quot;:&quot;${vvExId42}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId42}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId43}&quot;,&quot;id&quot;:&quot;${vvExId43}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId43}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId44}&quot;,&quot;id&quot;:&quot;${vvExId44}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId44}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId45}&quot;,&quot;id&quot;:&quot;${vvExId45}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId45}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId46}&quot;,&quot;id&quot;:&quot;${vvExId46}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId46}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId47}&quot;,&quot;id&quot;:&quot;${vvExId47}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId47}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId48}&quot;,&quot;id&quot;:&quot;${vvExId48}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId48}&quot;,&quot;finalCheckedOut&quot;:true},{&quot;operation&quot;:80,&quot;apiSource&quot;:&quot;web&quot;,&quot;extId&quot;:&quot;${vvExtId49}&quot;,&quot;id&quot;:&quot;${vvExId49}&quot;,&quot;visitId&quot;:&quot;${visitexId}&quot;,&quot;visitorId&quot;:&quot;${vvVisitorId49}&quot;,&quot;finalCheckedOut&quot;:true}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">20000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P1D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"> </stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMMoveOut" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">3</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/moveout" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/moveout</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterCriteria&quot;:[{&quot;fieldName&quot;:&quot;visitorId&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:&quot;${mvisitorId}&quot;},{&quot;fieldName&quot;:&quot;visitId&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:&quot;${mvisitId}&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${CSV}/moveOut.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">mvisitorId,mvisitId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P1D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"> </stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMModify" enabled="false">
        <intProp name="ThreadGroup.num_threads">30</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">6</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/find" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/find</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterQueryValue&quot;:&quot;&quot;,&quot;filterCriteria&quot;:[{&quot;fieldName&quot;:&quot;intStatus&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:0}],&quot;sortByString&quot;:&quot;[{\&quot;property\&quot;:\&quot;changedOn\&quot;,\&quot;direction\&quot;:\&quot;ASC\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId;extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id;$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;vehicleLicensePlate&quot;:&quot;Perf${__Random(0000000000,9999999999,)}&quot;},&quot;extId&quot;:&quot;${extId}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMCancel" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">9</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/update" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/update</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterCriteria&quot;:[{&quot;seq&quot;:1,&quot;fieldName&quot;:&quot;id&quot;,&quot;operator&quot;:&quot;in&quot;,&quot;valueList&quot;:[&quot;${visitC1}&quot;]}],&quot;updateFieldName&quot;:&quot;intStatus&quot;,&quot;updateValue&quot;:3,&quot;size&quot;:1,&quot;applyIntStatusClause&quot;:false,&quot;sortBy&quot;:[{&quot;direction&quot;:&quot;DESC&quot;,&quot;property&quot;:&quot;changedOn&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">C:/Users/pusarapu.avinash/Desktop/2024/SRP/CSV/CancelVisit.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">visitC1</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMCopyVisit" enabled="false">
        <intProp name="ThreadGroup.num_threads">30</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">12</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/find" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/find</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterCriteria&quot;:[{&quot;fieldName&quot;:&quot;intStatus&quot;,&quot;operator&quot;:&quot;in&quot;,&quot;valueList&quot;:[0,5,6,9]},{&quot;fieldName&quot;:&quot;linkedId&quot;,&quot;operator&quot;:&quot;isnull&quot;}],&quot;page&quot;:1,&quot;start&quot;:0,&quot;size&quot;:25,&quot;sortByString&quot;:&quot;[{\&quot;property\&quot;:\&quot;changedOn\&quot;,\&quot;direction\&quot;:\&quot;DESC\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">copyVisit</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/copyobject" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/copyobject</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${copyVisit}&quot;,&quot;withDbSave&quot;:false}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMEmergencyNotification" enabled="false">
        <intProp name="ThreadGroup.num_threads">2</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">30</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpm/visitui/emergencynotification/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpm/visitui/emergencynotification/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginpassword&quot;:&quot;Alert1234&quot;,&quot;notificationTemplate&quot;:4141231501086062,&quot;description&quot;:&quot;Performance emergency testing notification&quot;,&quot;visitFromDate&quot;:&quot;2024-05-27T17:00:00-07:00&quot;,&quot;visitToDate&quot;:&quot;2024-05-28T16:59:59-07:00&quot;,&quot;visitFromDateStr&quot;:&quot;2024-05-27T17:00:00-07:00&quot;,&quot;visitToDateStr&quot;:&quot;2024-05-28T16:59:59-07:00&quot;,&quot;locationIds&quot;:[4520436997337296],&quot;browserTimeZone&quot;:&quot;UTC&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">copyVisit</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="#DataCreationForCancel" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">13</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P1D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="name" enabled="true">
          <stringProp name="CounterConfig.start">2</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="false">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token_la)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[1]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">asset</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[2]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">requestIdentityFieldNewId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[3]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/upload" enabled="true">
          <stringProp name="HTTPSampler.path">/api/binaryresource/upload</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${CSV}\Image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">${CSV}\Image.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="title" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">crop.jpeg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">title</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">(binary)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="tHeight" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">175</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tHeight</stringProp>
              </elementProp>
              <elementProp name="tWidth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">250</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tWidth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">photoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;visitorRule&quot;:true},&quot;extId&quot;:&quot;&quot;,&quot;type&quot;:&quot;Visitor&quot;,&quot;photo&quot;:&quot;${photoId}&quot;,&quot;firstName&quot;:&quot;Cancel${id}&quot;,&quot;lastName&quot;:&quot;User${id}&quot;,&quot;email&quot;:&quot;pusarapu.avinash@alertenterprise.com&quot;,&quot;phone&quot;:&quot;1231231234&quot;,&quot;fullName&quot;:&quot;Cancel${id} User${id}&quot;,&quot;extCompany&quot;:&quot;One8&quot;,&quot;isReplaceEntityWhenFound&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;single&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitEscorts&quot;:[{&quot;escortId&quot;:&quot;${escortId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitStatus&quot;:60}],&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${__threadNum}&quot;&lt;=&quot;300&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckOut-/api/tpm/visitorsvisits/save" enabled="true">
            <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operation&quot;:80,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;finalCheckedOut&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">3000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="#FCDataCreation" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">13</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">299</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,PT2m,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="name" enabled="true">
          <stringProp name="CounterConfig.start">3</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="asset" enabled="false">
          <stringProp name="CounterConfig.start">7000000002</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">serialNo</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="false">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token_la)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[1]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">asset</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[2]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">requestIdentityFieldNewId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[3]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/upload" enabled="true">
          <stringProp name="HTTPSampler.path">/api/binaryresource/upload</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${CSV}\Image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">${CSV}\Image.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="title" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">crop.jpeg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">title</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">(binary)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="tHeight" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">175</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tHeight</stringProp>
              </elementProp>
              <elementProp name="tWidth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">250</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tWidth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">photoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;visitorRule&quot;:true},&quot;extId&quot;:&quot;&quot;,&quot;type&quot;:&quot;Visitor&quot;,&quot;photo&quot;:&quot;${photoId}&quot;,&quot;firstName&quot;:&quot;PerfFC${id}&quot;,&quot;lastName&quot;:&quot;UserFC${id}&quot;,&quot;email&quot;:&quot;pusarapu.avinash@alertenterprise.com&quot;,&quot;phone&quot;:&quot;1231231234&quot;,&quot;fullName&quot;:&quot;PerfFC${id} UserFC${id}&quot;,&quot;extCompany&quot;:&quot;One8&quot;,&quot;isReplaceEntityWhenFound&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;single&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitEscorts&quot;:[{&quot;escortId&quot;:&quot;${escortId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitStatus&quot;:60}],&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}AssetCreate" enabled="false">
          <stringProp name="HTTPSampler.path">/api/asset/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${asset}&quot;,&quot;type&quot;:&quot;temporary_badge&quot;,&quot;subType&quot;:&quot;TEM-001&quot;,&quot;serialNo&quot;:&quot;${serialNo}&quot;,&quot;assetAccessId&quot;:&quot;${serialNo}&quot;,&quot;text&quot;:&quot;PerformanceBadge&quot;,&quot;assetStatus&quot;:&quot;OPEN&quot;,&quot;sourceId&quot;:&quot;${serialNo}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckIn-/api/tpm/visitorsvisits/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operation&quot;:69,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${__threadNum}&quot;&lt;=&quot;300&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckOut-/api/tpm/visitorsvisits/save" enabled="true">
            <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operation&quot;:80,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;finalCheckedOut&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="#NSDataCreation" enabled="false">
        <intProp name="ThreadGroup.num_threads">301</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">13</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,PT2m,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="name" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="asset" enabled="false">
          <stringProp name="CounterConfig.start">7000000002</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">serialNo</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="false">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token_la)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[1]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">asset</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[2]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">requestIdentityFieldNewId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[3]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/binaryresource/upload" enabled="true">
          <stringProp name="HTTPSampler.path">/api/binaryresource/upload</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${CSV}\Image.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">${CSV}\Image.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="title" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">crop.jpeg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">title</stringProp>
              </elementProp>
              <elementProp name="file" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">(binary)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">file</stringProp>
              </elementProp>
              <elementProp name="tHeight" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">175</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tHeight</stringProp>
              </elementProp>
              <elementProp name="tWidth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">250</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tWidth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">photoId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitorId}&quot;,&quot;customProperties&quot;:{&quot;visitorRule&quot;:true},&quot;extId&quot;:&quot;&quot;,&quot;type&quot;:&quot;Visitor&quot;,&quot;photo&quot;:&quot;${photoId}&quot;,&quot;firstName&quot;:&quot;PerfNS${id}&quot;,&quot;lastName&quot;:&quot;UserNS${id}&quot;,&quot;email&quot;:&quot;pusarapu.avinash@alertenterprise.com&quot;,&quot;phone&quot;:&quot;1231231234&quot;,&quot;fullName&quot;:&quot;PerfNS${id} UserNS${id}&quot;,&quot;extCompany&quot;:&quot;One8&quot;,&quot;isReplaceEntityWhenFound&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visit/save" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;single&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitEscorts&quot;:[{&quot;escortId&quot;:&quot;${escortId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;visitStatus&quot;:60}],&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${__threadNum}&quot;&lt;=&quot;300&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}CheckOut-/api/tpm/visitorsvisits/save" enabled="true">
            <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operation&quot;:80,&quot;extId&quot;:&quot;${extId1}&quot;,&quot;id&quot;:&quot;${visitorVisitsId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitorId}&quot;,&quot;finalCheckedOut&quot;:true,&quot;documentType&quot;:&quot;manual&quot;,&quot;customFields&quot;:{},&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="#GroupDataCreationForMoveOut" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <longProp name="ThreadGroup.delay">23</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">gId</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token" enabled="true">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;lobby.admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/getnewids" enabled="true">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/tpmadmin/visitors/find" enabled="true">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visitors/find?</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;filterQueryValue&quot;:&quot;&quot;,&quot;filterCriteria&quot;:[{&quot;fieldName&quot;:&quot;intStatus&quot;,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:0}],&quot;sortByString&quot;:&quot;[{\&quot;property\&quot;:\&quot;changedOn\&quot;,\&quot;direction\&quot;:\&quot;DESC\&quot;}]&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitor0;visitor1;visitor2;visitor3;visitor4;visitor5;visitor6;visitor7;visitor8;visitor9;visitor10;visitor11;visitor12;visitor13;visitor14;visitor15;visitor16;visitor17;visitor18;visitor19;visitor20</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id;$.data[1].id;$.data[2].id;$.data[3].id;$.data[4].id;$.data[5].id;$.data[6].id;$.data[7].id;$.data[8].id;$.data[9].id;$.data[10].id;$.data[11].id;$.data[12].id;$.data[13].id;$.data[14].id;$.data[15].id;$.data[16].id;$.data[17].id;$.data[18].id;$.data[19].id;$.data[20].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupVisitCreation" enabled="true">
          <stringProp name="TestPlan.comments">21 users in a group</stringProp>
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Interview&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;group&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:&quot;${hostId}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:[{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor0}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor1}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor2}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor3}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor4}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor5}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor10}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor6}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor7}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor8}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor9}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor11}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor12}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor13}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor14}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor15}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor16}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor17}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor18}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor19}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;},{&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitorId&quot;:&quot;${visitor20}&quot;,&quot;visitStatus&quot;:60,&quot;isDocumentVerified&quot;:true,&quot;documentType&quot;:&quot;manual&quot;}],&quot;groupName&quot;:&quot;moveout${gId}&quot;,&quot;requestorId&quot;:&quot;${requestorId}&quot;,&quot;requestor&quot;:&quot;${requestor}&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">visitorVisitsId1;visitor1;visitorVisitsId2;visitor2;visitorVisitsId3;visitor3</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[0].id;$.data[0].visitorsVisits[0].visitorId;$.data[0].visitorsVisits[1].id;$.data[0].visitorsVisits[1].visitorId;$.data[0].visitorsVisits[2].id;$.data[0].visitorsVisits[2].visitorId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA;NA;NA;NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">extId;groupName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId;$.data[0].groupName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;random&quot;,&quot;${__Random(1000,9999,)}&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
            <stringProp name="filename">${CSV}/groupVisit.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">visitor1,visitor2,visitor3,visitor4,visitor5,visitor6,visitor7,visitor8,visitor9,visitor10</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupCheckIn" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;id&quot;:&quot;${visitorVisitsId1}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId1}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:60,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor1}&quot;,&quot;firstName&quot;:&quot;${fn1}&quot;,&quot;lastName&quot;:&quot;${ln1}&quot;,&quot;fullName&quot;:&quot;${fn1} ${ln1}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn1} ${ln1} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:69},{&quot;id&quot;:&quot;${visitorVisitsId2}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId2}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:60,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor2}&quot;,&quot;firstName&quot;:&quot;${fn2}&quot;,&quot;lastName&quot;:&quot;${ln2}&quot;,&quot;fullName&quot;:&quot;${fn2} ${ln2}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn2} ${ln2} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:69},{&quot;id&quot;:&quot;${visitorVisitsId3}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId3}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:60,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor3}&quot;,&quot;firstName&quot;:&quot;${fn3}&quot;,&quot;lastName&quot;:&quot;${ln3}&quot;,&quot;fullName&quot;:&quot;${fn3} ${ln3}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn3} ${ln3} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:69}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupCheckOut" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;id&quot;:&quot;${visitorVisitsId1}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId1}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:69,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor1}&quot;,&quot;firstName&quot;:&quot;${fn1}&quot;,&quot;lastName&quot;:&quot;${ln1}&quot;,&quot;fullName&quot;:&quot;${fn1} ${ln1}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn1} ${ln1} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:80,&quot;finalCheckedOut&quot;:true},{&quot;id&quot;:&quot;${visitorVisitsId2}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId2}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:69,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor2}&quot;,&quot;firstName&quot;:&quot;${fn2}&quot;,&quot;lastName&quot;:&quot;${ln2}&quot;,&quot;fullName&quot;:&quot;${fn2} ${ln2}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn2} ${ln2} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:80,&quot;finalCheckedOut&quot;:true},{&quot;id&quot;:&quot;${visitorVisitsId3}&quot;,&quot;id_str&quot;:&quot;${visitorVisitsId3}&quot;,&quot;isReplaceEntityWhenFound&quot;:false,&quot;intStatus&quot;:0,&quot;createdBy&quot;:119,&quot;createdOn&quot;:&quot;${validFrom}&quot;,&quot;changedBy&quot;:119,&quot;changedOn&quot;:&quot;${validFrom}&quot;,&quot;visitId&quot;:&quot;${visitId}&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitBufferedStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;visitArrivalDate&quot;:&quot;${validFrom}&quot;,&quot;visitDepartureDate&quot;:&quot;${validTo}&quot;,&quot;visitStatus&quot;:69,&quot;locationId&quot;:4408359167487993,&quot;recurringTypeId&quot;:1,&quot;visitorId&quot;:&quot;${visitor3}&quot;,&quot;firstName&quot;:&quot;${fn3}&quot;,&quot;lastName&quot;:&quot;${ln3}&quot;,&quot;fullName&quot;:&quot;${fn3} ${ln3}&quot;,&quot;email&quot;:&quot;perf@gmail.com&quot;,&quot;phone&quot;:&quot;9000090000&quot;,&quot;extId&quot;:&quot;${extId}&quot;,&quot;visitType&quot;:&quot;${groupName}&quot;,&quot;groupName&quot;:&quot;${groupName}&quot;,&quot;hostIds&quot;:&quot;119&quot;,&quot;isAllDayEvent&quot;:true,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;isNoShow&quot;:false,&quot;visitorsCount&quot;:3,&quot;isReminderSent&quot;:false,&quot;isDocumentVerified&quot;:false,&quot;extCompany&quot;:&quot;AE&quot;,&quot;visitorType&quot;:&quot;Visitor&quot;,&quot;createdByFullName&quot;:&quot;Monika Duggar&quot;,&quot;orgUnitId&quot;:0,&quot;orgDescription&quot;:&quot;&quot;,&quot;middleName&quot;:&quot;&quot;,&quot;assetId&quot;:&quot;&quot;,&quot;assetIdPending&quot;:&quot;&quot;,&quot;assetAccessId&quot;:&quot;&quot;,&quot;assetAccessIdPending&quot;:&quot;&quot;,&quot;fullNameText&quot;:&quot;${fn3} ${ln3} perf@gmail.com&quot;,&quot;apiSource&quot;:&quot;web&quot;,&quot;operation&quot;:80,&quot;finalCheckedOut&quot;:true}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P1D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"> </stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">4298296739033122</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">Lobby.admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VIMGroupOperationsAuto">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <stringProp name="ThreadGroup.ramp_time">${Rampup}</stringProp>
        <stringProp name="ThreadGroup.duration">${Rampup}</stringProp>
        <longProp name="ThreadGroup.delay">15</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
          <stringProp name="CounterConfig.start">0007</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">gId</stringProp>
          <stringProp name="CounterConfig.format">0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Admin-/api/auth/token">
          <stringProp name="HTTPSampler.path">/api/auth/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;Alert1234&quot;,&quot;captcha&quot;:&quot;&quot;,&quot;appLogin&quot;:true}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">access_token.notfound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
          </RegexExtractor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-ClientTimeZone" elementType="Header">
                <stringProp name="Header.name">X-ClientTimeZone</stringProp>
                <stringProp name="Header.value">America/Los_Angeles</stringProp>
              </elementProp>
              <elementProp name="X-Device-Info" elementType="Header">
                <stringProp name="Header.name">X-Device-Info</stringProp>
                <stringProp name="Header.value">eyJkZXZpY2VJZCI6bnVsbCwiZGV2aWNlVHlwZSI6IndlYiJ9</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${access_token}</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Pragma" elementType="Header">
              <stringProp name="Header.name">Pragma</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="X-ClientTimeZone" elementType="Header">
              <stringProp name="Header.name">X-ClientTimeZone</stringProp>
              <stringProp name="Header.value">America/Los_Angeles</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua</stringProp>
              <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-mobile" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
              <stringProp name="Header.value">?0</stringProp>
            </elementProp>
            <elementProp name="sec-ch-ua-platform" elementType="Header">
              <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
              <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}/api/getnewids">
          <stringProp name="HTTPSampler.path">api/getnewids</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">visitId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.json.JsonBuilder

// Get the number of visitors from the User Defined Variable
int visitorCount = vars.get(&quot;visitorCount&quot;) as int

// Initialize the list to hold visitor data
def visitors = []

// Generate visitor data
for (int i = 1; i &lt;= visitorCount; i++) {
    // Get the visitorId value from the CSV file
    def visitorId = vars.get(&quot;visitor&quot; + i)
    visitors &lt;&lt; [
        visitId:vars.get(&quot;visitId&quot;),
        visitorId:visitorId,
        visitStatus:60,
        isDocumentVerified:true,
        documentType:&apos;manual&apos;
    ]
}

// Create the payload using JsonBuilder
//def jsonPayload = new JsonBuilder(visitors).toPrettyString()
def jsonPayload = new JsonBuilder(visitors).toString()

// Store the payload in a JMeter variable
vars.put(&quot;dynamicPayloadvisitCreation&quot;, jsonPayload)

// Optionally, log the payload to JMeter&apos;s console
log.info(&quot;Generated Payload: \n&quot; + jsonPayload)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}GroupVisitCreation${visitorCount}">
          <stringProp name="HTTPSampler.path">/api/tpmadmin/visit/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;id&quot;:&quot;${visitId}&quot;,&quot;type&quot;:&quot;Visit_Registration&quot;,&quot;visitPurpose&quot;:&quot;Meeting&quot;,&quot;visitStartDate&quot;:&quot;${validFrom}&quot;,&quot;visitTypeCode&quot;:&quot;group&quot;,&quot;visitEndDate&quot;:&quot;${validTo}&quot;,&quot;locationId&quot;:&quot;${locationId}&quot;,&quot;visitHosts&quot;:[{&quot;hostId&quot;:1,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitEscorts&quot;:[{&quot;escortId&quot;:1,&quot;visitId&quot;:&quot;${visitId}&quot;}],&quot;visitorsVisits&quot;:${dynamicPayloadvisitCreation},&quot;groupName&quot;:&quot;PerfA${gId}&quot;,&quot;requestorId&quot;:1,&quot;requestor&quot;:&quot;admin&quot;,&quot;visitRecurrenceStartDateTime&quot;:&quot;${validFrom}&quot;,&quot;visitRecurrenceEndTimeForDay&quot;:&quot;${validTo}&quot;,&quot;visitRecurrenceEndDateTimeForPattern&quot;:&quot;${validTo}&quot;,&quot;recurringTypeId&quot;:1,&quot;isAllDayEvent&quot;:true,&quot;visitRecurrencePattern&quot;:[],&quot;apiSource&quot;:&quot;web&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">visitexId;vvExId0;vvExtId0;vvVisitorId0;vvExId1;vvExtId1;vvVisitorId1;vvExId2;vvExtId2;vvVisitorId2;vvExId3;vvExtId3;vvVisitorId3;vvExId4;vvExtId4;vvVisitorId4;vvExId5;vvExtId5;vvVisitorId5;vvExId6;vvExtId6;vvVisitorId6;vvExId7;vvExtId7;vvVisitorId7;vvExId8;vvExtId8;vvVisitorId8;vvExId9;vvExtId9;vvVisitorId9;</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id;$.data[0].visitorsVisits[0].id;$.data[0].visitorsVisits[0].extId;$.data[0].visitorsVisits[0].visitorId;$.data[0].visitorsVisits[1].id;$.data[0].visitorsVisits[1].extId;$.data[0].visitorsVisits[1].visitorId;$.data[0].visitorsVisits[2].id;$.data[0].visitorsVisits[2].extId;$.data[0].visitorsVisits[2].visitorId;$.data[0].visitorsVisits[3].id;$.data[0].visitorsVisits[3].extId;$.data[0].visitorsVisits[3].visitorId;$.data[0].visitorsVisits[4].id;$.data[0].visitorsVisits[4].extId;$.data[0].visitorsVisits[4].visitorId;$.data[0].visitorsVisits[5].id;$.data[0].visitorsVisits[5].extId;$.data[0].visitorsVisits[5].visitorId;$.data[0].visitorsVisits[6].id;$.data[0].visitorsVisits[6].extId;$.data[0].visitorsVisits[6].visitorId;$.data[0].visitorsVisits[7].id;$.data[0].visitorsVisits[7].extId;$.data[0].visitorsVisits[7].visitorId;$.data[0].visitorsVisits[8].id;$.data[0].visitorsVisits[8].extId;$.data[0].visitorsVisits[8].visitorId;$.data[0].visitorsVisits[9].id;$.data[0].visitorsVisits[9].extId;$.data[0].visitorsVisits[9].visitorId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">visitexIdNF;vvExId0NF;vvExtId0NF;vvVisitorId0NF;vvExId1NF;vvExtId1NF;vvVisitorId1NF;vvExId2NF;vvExtId2NF;vvVisitorId2NF;vvExId3NF;vvExtId3NF;vvVisitorId3NF;vvExId4NF;vvExtId4NF;vvVisitorId4NF;vvExId5NF;vvExtId5NF;vvVisitorId5NF;vvExId6NF;vvExtId6NF;vvVisitorId6NF;vvExId7NF;vvExtId7NF;vvVisitorId7NF;vvExId8NF;vvExtId8NF;vvVisitorId8NF;vvExId9NF;vvExtId9NF;vvVisitorId9NF;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">extId;groupName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].extId;$.data[0].groupName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA;NA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;random&quot;,&quot;${__Random(1000,9999,)}&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">visitexId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">vvExId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">vvExtId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[*].extId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">vvVisitorId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].visitorsVisits[*].visitorId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.json.JsonBuilder

// Get the number of visitors from the User Defined Variable
int visitorCount = vars.get(&quot;visitorCount&quot;) as int

// Initialize the list to hold visitor data
def visitors = []

// Generate visitor data
for (int i = 0; i &lt; visitorCount; i++) {
    visitors &lt;&lt; [
        operation: 69,
        apiSource: &apos;web&apos;,
        extId: vars.get(&quot;vvExtId&quot; + i),
        id: vars.get(&quot;vvExId&quot; + i),
        visitId: vars.get(&quot;visitexId&quot;),
        visitorId: vars.get(&quot;vvVisitorId&quot; + i),
        finalCheckedOut: true
    ]
}

// Create the payload using JsonBuilder
def jsonPayload = new JsonBuilder(visitors).toPrettyString()

// Store the payload in a JMeter variable
vars.put(&quot;dynamicPayloadCheckIn&quot;, jsonPayload)

// Optionally, log the payload to JMeter&apos;s console
log.info(&quot;Generated Payload: \n&quot; + jsonPayload)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckIn${visitorCount}" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${dynamicPayloadCheckIn}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Initialize the payload array
def payload = []

// Get the number of extracted elements
def matchNr = vars.get(&quot;vvExId_matchNr&quot;)

if (matchNr == null || matchNr.isEmpty()) {
    log.error(&quot;No extracted elements found&quot;)
    return
}

int count = matchNr as int

// Loop through each extracted element and build the payload
for (int i = 1; i &lt;= count; i++) {
    def extId = vars.get(&quot;vvExtId_&quot; + i)
    def exId = vars.get(&quot;vvExId_&quot; + i)
    def visitorId = vars.get(&quot;vvVisitorId_&quot; + i)
    
    if (extId == null || exId == null || visitorId == null) {
        log.error(&quot;Missing value for vvExtId_&quot; + i + &quot; or vvExId_&quot; + i + &quot; or vvVisitorId_&quot; + i)
        continue
    }
    
    def visitorPayload = [
        &quot;operation&quot;        : 69,
        &quot;apiSource&quot;        : &quot;web&quot;,
        &quot;extId&quot;            : extId,
        &quot;id&quot;               : exId,
        &quot;visitId&quot;          : vars.get(&quot;visitexId&quot;),
        &quot;visitorId&quot;        : visitorId,
        &quot;finalCheckedOut&quot;  : true
    ]
    payload &lt;&lt; visitorPayload
}

// Convert the payload list to JSON string
def payloadJson = new groovy.json.JsonBuilder(payload).toString()

// Set the JSON string to a JMeter variable
vars.put(&quot;dynamicPayloadCheckIn&quot;, payloadJson)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${__threadGroupName}MassCheckOut${visitorCount}" enabled="false">
          <stringProp name="HTTPSampler.path">/api/tpm/visitorsvisits/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${dynamicPayloadCheckIn}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Initialize the payload array
def payload = []

// Get the number of extracted elements
def matchNr = vars.get(&quot;vvExId_matchNr&quot;)

if (matchNr == null || matchNr.isEmpty()) {
    log.error(&quot;No extracted elements found&quot;)
    return
}

int count = matchNr as int

// Loop through each extracted element and build the payload
for (int i = 1; i &lt;= count; i++) {
    def extId = vars.get(&quot;vvExtId_&quot; + i)
    def exId = vars.get(&quot;vvExId_&quot; + i)
    def visitorId = vars.get(&quot;vvVisitorId_&quot; + i)
    
    if (extId == null || exId == null || visitorId == null) {
        log.error(&quot;Missing value for vvExtId_&quot; + i + &quot; or vvExId_&quot; + i + &quot; or vvVisitorId_&quot; + i)
        continue
    }
    
    def visitorPayload = [
        &quot;operation&quot;        : 80,
        &quot;apiSource&quot;        : &quot;web&quot;,
        &quot;extId&quot;            : extId,
        &quot;id&quot;               : exId,
        &quot;visitId&quot;          : vars.get(&quot;visitexId&quot;),
        &quot;visitorId&quot;        : visitorId,
        &quot;finalCheckedOut&quot;  : true
    ]
    payload &lt;&lt; visitorPayload
}

// Convert the payload list to JSON string
def payloadJson = new groovy.json.JsonBuilder(payload).toString()

// Set the JSON string to a JMeter variable
vars.put(&quot;dynamicPayloadCheckIn&quot;, payloadJson)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
          <stringProp name="filename">${CSV}\groupVisit.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">visitor1,visitor2,visitor3,visitor4,visitor5,visitor6,visitor7,visitor8,visitor9,visitor10,visitor11,visitor12,visitor13,visitor14,visitor15,visitor16,visitor17,visitor18,visitor19,visitor20,visitor21,visitor22,visitor23,visitor24,visitor25,visitor26,visitor27,visitor28,visitor29,visitor30,visitor31,visitor32,visitor33,visitor34,visitor35,visitor36,visitor37,visitor38,visitor39,visitor40,visitor41,visitor42,visitor43,visitor44,visitor45,visitor46,visitor47,visitor48,visitor49,visitor50,visitor51,visitor52,visitor53,visitor54,visitor55,visitor56,visitor57,visitor58,visitor59,visitor60,visitor61,visitor62,visitor63,visitor64,visitor65,visitor66,visitor67,visitor68,visitor69,visitor70,visitor71,visitor72,visitor73,visitor74,visitor75,visitor76,visitor77,visitor78,visitor79,visitor80,visitor81,visitor82,visitor83,visitor84,visitor85,visitor86,visitor87,visitor88,visitor89,visitor90,visitor91,visitor92,visitor93,visitor94,visitor95,visitor96,visitor97,visitor98,visitor99,visitor100,visitor101,visitor102,visitor103,visitor104,visitor105,visitor106,visitor107,visitor108,visitor109,visitor110,visitor111,visitor112,visitor113,visitor114,visitor115,visitor116,visitor117,visitor118,visitor119,visitor120,visitor121,visitor122,visitor123,visitor124,visitor125,visitor126,visitor127,visitor128,visitor129,visitor130,visitor131,visitor132,visitor133,visitor134,visitor135,visitor136,visitor137,visitor138,visitor139,visitor140,visitor141,visitor142,visitor143,visitor144,visitor145,visitor146,visitor147,visitor148,visitor149,visitor150,visitor151,visitor152,visitor153,visitor154,visitor155,visitor156,visitor157,visitor158,visitor159,visitor160,visitor161,visitor162,visitor163,visitor164,visitor165,visitor166,visitor167,visitor168,visitor169,visitor170,visitor171,visitor172,visitor173,visitor174,visitor175,visitor176,visitor177,visitor178,visitor179,visitor180,visitor181,visitor182,visitor183,visitor184,visitor185,visitor186,visitor187,visitor188,visitor189,visitor190,visitor191,visitor192,visitor193,visitor194,visitor195,visitor196,visitor197,visitor198,visitor199,visitor200,visitor201,visitor202,visitor203,visitor204,visitor205,visitor206,visitor207,visitor208,visitor209,visitor210,visitor211,visitor212,visitor213,visitor214,visitor215,visitor216,visitor217,visitor218,visitor219,visitor220,visitor221,visitor222,visitor223,visitor224,visitor225,visitor226,visitor227,visitor228,visitor229,visitor230,visitor231,visitor232,visitor233,visitor234,visitor235,visitor236,visitor237,visitor238,visitor239,visitor240,visitor241,visitor242,visitor243,visitor244,visitor245,visitor246,visitor247,visitor248,visitor249,visitor250,visitor251,visitor252,visitor253,visitor254,visitor255,visitor256,visitor257,visitor258,visitor259,visitor260,visitor261,visitor262,visitor263,visitor264,visitor265,visitor266,visitor267,visitor268,visitor269,visitor270,visitor271,visitor272,visitor273,visitor274,visitor275,visitor276,visitor277,visitor278,visitor279,visitor280,visitor281,visitor282,visitor283,visitor284,visitor285,visitor286,visitor287,visitor288,visitor289,visitor290,visitor291,visitor292,visitor293,visitor294,visitor295,visitor296,visitor297,visitor298,visitor299,visitor300,visitor301,visitor302,visitor303,visitor304,visitor305,visitor306,visitor307,visitor308,visitor309,visitor310,visitor311,visitor312,visitor313,visitor314,visitor315,visitor316,visitor317,visitor318,visitor319,visitor320,visitor321,visitor322,visitor323,visitor324,visitor325,visitor326,visitor327,visitor328,visitor329,visitor330,visitor331,visitor332,visitor333,visitor334,visitor335,visitor336,visitor337,visitor338,visitor339,visitor340,visitor341,visitor342,visitor343,visitor344,visitor345,visitor346,visitor347,visitor348,visitor349,visitor350,visitor351,visitor352,visitor353,visitor354,visitor355,visitor356,visitor357,visitor358,visitor359,visitor360,visitor361,visitor362,visitor363,visitor364,visitor365,visitor366,visitor367,visitor368,visitor369,visitor370,visitor371,visitor372,visitor373,visitor374,visitor375,visitor376,visitor377,visitor378,visitor379,visitor380,visitor381,visitor382,visitor383,visitor384,visitor385,visitor386,visitor387,visitor388,visitor389,visitor390,visitor391,visitor392,visitor393,visitor394,visitor395,visitor396,visitor397,visitor398,visitor399,visitor400,visitor401,visitor402,visitor403,visitor404,visitor405,visitor406,visitor407,visitor408,visitor409,visitor410,visitor411,visitor412,visitor413,visitor414,visitor415,visitor416,visitor417,visitor418,visitor419,visitor420,visitor421,visitor422,visitor423,visitor424,visitor425,visitor426,visitor427,visitor428,visitor429,visitor430,visitor431,visitor432,visitor433,visitor434,visitor435,visitor436,visitor437,visitor438,visitor439,visitor440,visitor441,visitor442,visitor443,visitor444,visitor445,visitor446,visitor447,visitor448,visitor449,visitor450,visitor451,visitor452,visitor453,visitor454,visitor455,visitor456,visitor457,visitor458,visitor459,visitor460,visitor461,visitor462,visitor463,visitor464,visitor465,visitor466,visitor467,visitor468,visitor469,visitor470,visitor471,visitor472,visitor473,visitor474,visitor475,visitor476,visitor477,visitor478,visitor479,visitor480,visitor481,visitor482,visitor483,visitor484,visitor485,visitor486,visitor487,visitor488,visitor489,visitor490,visitor491,visitor492,visitor493,visitor494,visitor495,visitor496,visitor497,visitor498,visitor499,visitor500 </stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer">
          <stringProp name="ConstantTimer.delay">1000.0</stringProp>
          <stringProp name="RandomTimer.range">2000.0</stringProp>
        </UniformRandomTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="validFrom" elementType="Argument">
              <stringProp name="Argument.name">validFrom</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="validTo" elementType="Argument">
              <stringProp name="Argument.name">validTo</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P1D,,)}-0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="locationId" elementType="Argument">
              <stringProp name="Argument.name">locationId</stringProp>
              <stringProp name="Argument.value">4520436997337296</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostId" elementType="Argument">
              <stringProp name="Argument.name">hostId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"> </stringProp>
            </elementProp>
            <elementProp name="escortId" elementType="Argument">
              <stringProp name="Argument.name">escortId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestorId" elementType="Argument">
              <stringProp name="Argument.name">requestorId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="requestor" elementType="Argument">
              <stringProp name="Argument.name">requestor</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="visitorCount" elementType="Argument">
              <stringProp name="Argument.name">visitorCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
